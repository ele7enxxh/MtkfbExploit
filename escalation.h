#ifndef _ESCALATION_H
#define _ESCALATION_H

#include <unistd.h>
#include <stdbool.h>

#define _LINUX_CAPABILITY_U32S_3     2
#define _KERNEL_CAPABILITY_U32S    _LINUX_CAPABILITY_U32S_3

typedef unsigned int u32;

typedef struct kernel_cap_struct {
	__u32 cap[_KERNEL_CAPABILITY_U32S];
} kernel_cap_t;

// struct key;
// struct thread_group_cred;
struct cred {
	unsigned long usage;
	uid_t uid;            /* real UID of the task */
	gid_t gid;            /* real GID of the task */
	uid_t suid;           /* saved UID of the task */
	gid_t sgid;           /* saved GID of the task */
	uid_t euid;           /* effective UID of the task */
	gid_t egid;           /* effective GID of the task */
	uid_t fsuid;          /* UID for VFS ops */
	gid_t fsgid;          /* GID for VFS ops */
	unsigned long securebits;     /* SUID-less security management */
	kernel_cap_t cap_inheritable; /* caps our children can inherit */
	kernel_cap_t cap_permitted;  /* caps we're permitted */
	kernel_cap_t cap_effective;  /* caps we can actually use */
	kernel_cap_t cap_bset;       /* capability bounding set */
	unsigned char jit_keyring;
	void *thread_keyring;
	void *request_key_auth;
	void *tgcred;
	void *security;      /* subjective LSM security */
};

struct task_struct;
struct thread_info {
	unsigned long		flags;		/* low level flags */
	int			preempt_count;	/* 0 => preemptable, <0 => bug */
	unsigned long		addr_limit;	/* address limit */
	struct task_struct	*task;		/* main task structure */
};

struct task_security_struct {
	u32 osid;		/* SID prior to last execve */
	u32 sid;		/* current SID */
	u32 exec_sid;		/* exec SID */
	u32 create_sid;		/* fscreate SID */
	u32 keycreate_sid;	/* keycreate SID */
	u32 sockcreate_sid;	/* fscreate SID */
};

int ReadPipe(void *writebuf, void *readbuf, size_t count);
int WritePipe(void *readbuf, void *writebuf, size_t count);
bool EscalationByCommitCreds(void *prepare_kernel_cred_addr, void *commit_creds_addr);
bool EscalationByModifyCreds(const char *process_name, bool is_selinux, unsigned long magic_num);

#endif